/**
 * VueLayers
 * Web map Vue components with the power of OpenLayers
 *
 * @package vuelayers
 * @author Vladimir Vershinin <ghettovoice@gmail.com>
 * @version 0.11.27
 * @license MIT
 * @copyright (c) 2017-2020, Vladimir Vershinin <ghettovoice@gmail.com>
 */
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import Collection from 'ol/Collection';
import BaseLayer from 'ol/layer/Base';
import Vue from 'vue';
import { merge } from 'rxjs/_esm5/internal/observable/merge';
import { getLayerId, initializeLayer } from '../ol-ext';
import { observableFromOlEvent } from '../rx-ext';
import { instanceOf } from '../util/assert';
import rxSubs from './rx-subs';
import identMap from './ident-map';

var layersContainer = {
  mixins: [identMap, rxSubs],
  computed: {
    layerIds: function layerIds() {
      var _context;

      if (!this.rev) return [];
      return _mapInstanceProperty(_context = this.getLayers()).call(_context, getLayerId);
    },
    layersCollectionIdent: function layersCollectionIdent() {
      if (!this.olObjIdent) return;
      return this.makeIdent(this.olObjIdent, 'layers_collection');
    }
  },
  methods: {
    /**
     * @param {BaseLayer|Vue} layer
     * @return {void}
     */
    addLayer: function addLayer(layer) {
      layer = layer instanceof Vue ? layer.$layer : layer;
      instanceOf(layer, BaseLayer);

      if (this.getLayerById(getLayerId(layer)) == null) {
        initializeLayer(layer);
        this.$layersCollection.push(layer);
      }
    },

    /**
     * @param {BaseLayer|Vue} layer
     * @return {void}
     */
    removeLayer: function removeLayer(layer) {
      layer = this.getLayerById(getLayerId(layer));
      if (!layer) return;
      this.$layersCollection.remove(layer);
    },

    /**
     * @return {BaseLayer[]}
     */
    getLayers: function getLayers() {
      return this.$layersCollection.getArray();
    },

    /**
     * @return {module:ol/Collection~Collection<BaseLayer>}
     */
    getLayersCollection: function getLayersCollection() {
      return this._layersCollection;
    },

    /**
     * @param {string|number} layerId
     * @return {BaseLayer|undefined}
     */
    getLayerById: function getLayerById(layerId) {
      var _context2;

      return _findInstanceProperty(_context2 = this.$layersCollection.getArray()).call(_context2, function (layer) {
        return getLayerId(layer) === layerId;
      });
    },

    /**
     * @return {void}
     */
    clearLayers: function clearLayers() {
      this.$layersCollection.clear();
    },

    /**
     * @returns {Object}
     * @protected
     */
    getServices: function getServices() {
      var vm = this;
      return {
        get layersContainer() {
          return vm;
        }

      };
    }
  },
  created: function created() {
    this._layersCollection = this.instanceFactoryCall(this.layersCollectionIdent, function () {
      return new Collection();
    });
    defineServices.call(this);
    subscribeToCollectionEvents.call(this);
  }
};

function defineServices() {
  _Object$defineProperties(this, {
    $layersCollection: {
      enumerable: true,
      get: this.getLayersCollection
    }
  });
}

function subscribeToCollectionEvents() {
  var _this = this;

  var adds = observableFromOlEvent(this.$layersCollection, 'add');
  var removes = observableFromOlEvent(this.$layersCollection, 'remove');
  this.subscribeTo(merge(adds, removes), function (_ref) {
    var type = _ref.type,
        element = _ref.element;
    ++_this.rev;

    _this.$nextTick(function () {
      _this.$emit(type + ':layer', element);
    });
  });
}

export default layersContainer;
