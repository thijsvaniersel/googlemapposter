/**
 * VueLayers
 * Web map Vue components with the power of OpenLayers
 *
 * @package vuelayers
 * @author Vladimir Vershinin <ghettovoice@gmail.com>
 * @version 0.11.27
 * @license MIT
 * @copyright (c) 2017-2020, Vladimir Vershinin <ghettovoice@gmail.com>
 */
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _sortInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/sort';
import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import Collection from 'ol/Collection';
import Interaction from 'ol/interaction/Interaction';
import Vue from 'vue';
import { merge } from 'rxjs/_esm5/internal/observable/merge';
import { getInteractionId, getInteractionPriority, initializeInteraction } from '../ol-ext';
import { instanceOf } from '../util/assert';
import rxSubs from './rx-subs';
import identMap from './ident-map';
import { observableFromOlEvent } from '../rx-ext';

var interactionsContainer = {
  mixins: [identMap, rxSubs],
  computed: {
    interactionIds: function interactionIds() {
      var _context;

      if (!this.rev) return [];
      return _mapInstanceProperty(_context = this.getInteractions()).call(_context, getInteractionId);
    },
    interactionsCollectionIdent: function interactionsCollectionIdent() {
      if (!this.olObjIdent) return;
      return this.makeIdent(this.olObjIdent, 'interactions_collection');
    }
  },
  methods: {
    /**
     * @param {Interaction|Vue} interaction
     * @return {void}
     */
    addInteraction: function addInteraction(interaction) {
      interaction = interaction instanceof Vue ? interaction.$interaction : interaction;
      instanceOf(interaction, Interaction);

      if (this.getInteractionById(getInteractionId(interaction)) == null) {
        initializeInteraction(interaction);
        this.$interactionsCollection.push(interaction);
        this.sortInteractions();
      }
    },

    /**
     * @param {Interaction|Vue} interaction
     * @return {void}
     */
    removeInteraction: function removeInteraction(interaction) {
      interaction = this.getInteractionById(getInteractionId(interaction));
      if (!interaction) return;
      this.$interactionsCollection.remove(interaction);
      this.sortInteractions();
    },

    /**
     * @return {Interaction[]}
     */
    getInteractions: function getInteractions() {
      return this.$interactionsCollection.getArray();
    },

    /**
     * @return {Collection<Interaction>>}
     */
    getInteractionsCollection: function getInteractionsCollection() {
      return this._interactionsCollection;
    },

    /**
     * @param {string|number} interactionId
     * @return {Interaction|undefined}
     */
    getInteractionById: function getInteractionById(interactionId) {
      var _context2;

      return _findInstanceProperty(_context2 = this.$interactionsCollection.getArray()).call(_context2, function (interaction) {
        return getInteractionId(interaction) === interactionId;
      });
    },

    /**
     * @return {void}
     */
    sortInteractions: function sortInteractions(sorter) {
      var _context3;

      sorter || (sorter = this.getDefaultInteractionsSorter());

      _sortInstanceProperty(_context3 = this.$interactionsCollection.getArray()).call(_context3, sorter);
    },

    /**
     * @return {function}
     * @protected
     */
    getDefaultInteractionsSorter: function getDefaultInteractionsSorter() {
      // sort interactions by priority in asc order
      // the higher the priority, the earlier the interaction handles the event
      return function (a, b) {
        var ap = getInteractionPriority(a) || 0;
        var bp = getInteractionPriority(b) || 0;
        return ap === bp ? 0 : ap - bp;
      };
    },

    /**
     * @return {void}
     */
    clearInteractions: function clearInteractions() {
      this.$interactionsCollection.clear();
    },

    /**
     * @returns {Object}
     * @protected
     */
    getServices: function getServices() {
      var vm = this;
      return {
        get interactionsContainer() {
          return vm;
        }

      };
    }
  },
  created: function created() {
    this._interactionsCollection = this.instanceFactoryCall(this.interactionsCollectionIdent, function () {
      return new Collection();
    });
    defineServices.call(this);
    subscribeToCollectionEvents.call(this);
  }
};

function defineServices() {
  _Object$defineProperties(this, {
    $interactionsCollection: {
      enumerable: true,
      get: this.getInteractionsCollection
    }
  });
}

function subscribeToCollectionEvents() {
  var _this = this;

  var adds = observableFromOlEvent(this.$interactionsCollection, 'add');
  var removes = observableFromOlEvent(this.$interactionsCollection, 'remove');
  this.subscribeTo(merge(adds, removes), function (_ref) {
    var type = _ref.type,
        element = _ref.element;
    ++_this.rev;

    _this.$nextTick(function () {
      _this.$emit(type + ':interaction', element);
    });
  });
}

export default interactionsContainer;
