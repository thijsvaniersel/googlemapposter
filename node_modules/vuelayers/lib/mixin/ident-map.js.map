{"version":3,"file":"ident-map.js","sources":["src/mixin/ident-map.js"],"sourcesContent":["import Vue from 'vue'\nimport IdentityMap from '../util/identity-map'\nimport { identity, stubObject, keys } from '../util/minilo'\n\nconst INSTANCES_POOL = 'instances'\n\nexport default {\n  INSTANCES_POOL,\n  props: {\n    /**\n     * Unique key for saving to identity map\n     * @type {string|number}\n     * @experimental\n     */\n    ident: [String, Number],\n  },\n  data () {\n    return {\n      idents: stubObject(),\n    }\n  },\n  computed: {\n    selfIdent () {\n      return this.makeSelfIdent()\n    },\n  },\n  watch: {\n    ident (value, prev) {\n      if (prev && this.$identityMap.has(prev)) {\n        this.$identityMap.unset(prev)\n      }\n      if (value && !this.$identityMap.has(value)) {\n        this.$identityMap.set(value)\n      }\n    },\n  },\n  beforeCreate () {\n    initIdentityMap()\n  },\n  destroyed () {\n    this.unsetInstances()\n  },\n  methods: {\n    /**\n     * @param parts\n     * @return {string|undefined}\n     * @protected\n     */\n    makeSelfIdent (...parts) {\n      if (!this.ident) return\n\n      return this.makeIdent(this.ident, ...parts)\n    },\n    /**\n     * @param parts\n     * @return {string}\n     */\n    makeIdent (...parts) {\n      return parts.filter(identity).join('.')\n    },\n    /**\n     * Caches or reuse factory result in the identity map\n     * and returns result.\n     *\n     * @param {string|undefined} ident\n     * @param {function} factory\n     * @returns {*}\n     */\n    instanceFactoryCall (ident, factory) {\n      if (ident && this.$identityMap.has(ident, INSTANCES_POOL)) {\n        this.idents[ident] = true\n        return this.$identityMap.get(ident, INSTANCES_POOL)\n      }\n\n      const inst = factory()\n\n      if (ident) {\n        this.idents[ident] = true\n        this.$identityMap.set(ident, inst, INSTANCES_POOL)\n      }\n\n      return inst\n    },\n    /**\n     * @param {string|undefined} ident\n     * @returns {*}\n     */\n    getInstance (ident) {\n      if (!ident) return\n\n      if (!this.hasInstance(ident)) return\n\n      this.idents[ident] = true\n\n      return this.$identityMap.get(ident, INSTANCES_POOL)\n    },\n    /**\n     * @param {string|undefined} ident\n     * @returns {*}\n     */\n    hasInstance (ident) {\n      if (!ident) return false\n\n      return this.$identityMap.has(ident, INSTANCES_POOL)\n    },\n    /**\n     * @param {string|undefined} ident\n     */\n    unsetInstance (ident) {\n      if (!ident) return\n\n      delete this.idents[ident]\n\n      this.$identityMap.unset(ident, INSTANCES_POOL)\n    },\n    /**\n     * Unsets all self indets\n     * @return {void}\n     */\n    unsetInstances () {\n      keys(this.idents).forEach(::this.unsetInstance)\n    },\n  },\n}\n\nfunction initIdentityMap () {\n  const imap = new IdentityMap()\n\n  if (!('$identityMap' in Vue)) {\n    Object.defineProperties(Vue, {\n      $identityMap: {\n        enumerable: true,\n        get: () => imap,\n      },\n    })\n  }\n\n  if (!('$identityMap' in Vue.prototype)) {\n    Object.defineProperties(Vue.prototype, {\n      $identityMap: {\n        enumerable: true,\n        get: () => imap,\n      },\n    })\n  }\n}\n"],"names":["INSTANCES_POOL","props","ident","String","Number","data","idents","stubObject","computed","selfIdent","makeSelfIdent","watch","value","prev","$identityMap","has","unset","set","beforeCreate","initIdentityMap","destroyed","unsetInstances","methods","parts","makeIdent","identity","join","instanceFactoryCall","factory","get","inst","getInstance","hasInstance","unsetInstance","keys","imap","IdentityMap","Vue","enumerable","prototype"],"mappings":"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"}