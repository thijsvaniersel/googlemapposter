/**
 * VueLayers
 * Web map Vue components with the power of OpenLayers
 *
 * @package vuelayers
 * @author Vladimir Vershinin <ghettovoice@gmail.com>
 * @version 0.11.24
 * @license MIT
 * @copyright (c) 2017-2020, Vladimir Vershinin <ghettovoice@gmail.com>
 */
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import { EPSG_3857 } from '../ol-ext';
import { observableFromOlEvent } from '../rx-ext';
import { hasSource } from '../util/assert';
import { makeWatchers } from '../util/vue-helpers';
import source from './source';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source$$1 = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source$$1), true)).call(_context, function (key) { _defineProperty(target, key, source$$1[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source$$1)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source$$1))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source$$1, key)); }); } } return target; }
var imageSource = {
  mixins: [source],
  props: {
    crossOrigin: String,
    projection: {
      type: String,
      default: EPSG_3857
    }
  },
  methods: {
    /**
     * @return {Promise}
     * @protected
     */
    init: function init() {
      return source.methods.init.call(this);
    },

    /**
     * @return {void|Promise<void>}
     * @protected
     */
    deinit: function deinit() {
      return source.methods.deinit.call(this);
    },

    /**
     * @return {void}
     * @protected
     */
    mount: function mount() {
      source.methods.mount.call(this);
    },

    /**
     * @return {void}
     * @protected
     */
    unmount: function unmount() {
      source.methods.unmount.call(this);
    },
    subscribeAll: function subscribeAll() {
      source.methods.subscribeAll.call(this);
      subscribeToSourceEvents.call(this);
    }
  },
  watch: _objectSpread({}, makeWatchers(['crossOrigin'], function () {
    return function () {
      this.scheduleRecreate();
    };
  }))
};

function subscribeToSourceEvents() {
  var _this = this;

  hasSource(this);
  var events = observableFromOlEvent(this.$source, ['imageloadend', 'imageloaderror', 'imageloadstart']);
  this.subscribeTo(events, function (evt) {
    _this.$emit(evt.type, evt);
  });
}

export default imageSource;
