{"version":3,"file":"vector-layer.js","sources":["src/mixin/vector-layer.js"],"sourcesContent":["import { isEqual } from '../util/minilo'\nimport mergeDescriptors from '../util/multi-merge-descriptors'\nimport layer from './layer'\nimport stylesContainer from './styles-container'\n\nexport default {\n  mixins: [layer, stylesContainer],\n  props: {\n    /**\n     * When set to `true`, feature batches will be recreated during animations.\n     * @type {boolean}\n     * @default false\n     */\n    updateWhileAnimating: Boolean,\n    /**\n     * When set to `true`, feature batches will be recreated during interactions.\n     * @type {boolean}\n     * @default false\n     */\n    updateWhileInteracting: Boolean,\n    /**\n     * @type {number|undefined}\n     */\n    renderBuffer: {\n      type: Number,\n      default: 100,\n    },\n    renderOrder: Function,\n    renderMode: {\n      type: String,\n      default: 'vector',\n      validator: value => ['vector', 'image'].includes(value),\n    },\n    /**\n     * @type {boolean}\n     */\n    declutter: Boolean,\n  },\n  methods: {\n    /**\n     * @return {Promise<Vue<Layer>>}\n     * @protected\n     */\n    init () {\n      return this::layer.methods.init()\n    },\n    /**\n     * @return {void|Promise<void>}\n     * @protected\n     */\n    deinit () {\n      return this::layer.methods.deinit()\n    },\n    /**\n     * @returns {Object}\n     * @protected\n     */\n    getServices () {\n      return mergeDescriptors(\n        this::layer.methods.getServices(),\n        this::stylesContainer.methods.getServices(),\n      )\n    },\n    /**\n     * @return {Vector|undefined}\n     * @protected\n     */\n    getStyleTarget () {\n      return this.$layer\n    },\n    /**\n     * @return {Promise|void}\n     * @protected\n     */\n    mount () {\n      return this::layer.methods.mount()\n    },\n    /**\n     * @return {Promise|void}\n     * @protected\n     */\n    unmount () {\n      return this::layer.methods.unmount()\n    },\n    /**\n     * Updates layer state\n     * @return {Promise}\n     */\n    refresh () {\n      return this::layer.methods.refresh()\n    },\n    /**\n     * Internal usage only in components that doesn't support refreshing.\n     * @return {Promise<void>}\n     * @protected\n     */\n    remount () {\n      return this::layer.methods.remount()\n    },\n    /**\n     * Internal usage only in components that doesn't support refreshing.\n     * @return {Promise<void>}\n     * @protected\n     */\n    recreate () {\n      return this::layer.methods.remount()\n    },\n    /**\n     * @protected\n     */\n    subscribeAll () {\n      this::layer.methods.subscribeAll()\n    },\n  },\n  watch: {\n    updateWhileAnimating (value) {\n      if (!this.$layer || value === this.$layer.getUpdateWhileAnimating()) {\n        return\n      }\n\n      this.scheduleRecreate()\n    },\n    updateWhileInteracting (value) {\n      if (!this.$layer || value === this.$layer.getUpdateWhileInteracting()) {\n        return\n      }\n\n      this.scheduleRecreate()\n    },\n    renderBuffer (value) {\n      if (!this.$layer || value === this.$layer.getRenderBuffer()) {\n        return\n      }\n\n      this.scheduleRecreate()\n    },\n    renderOrder (value) {\n      if (!this.$layer || isEqual(value, this.$layer.getRenderOrder())) {\n        return\n      }\n\n      this.$layer.setRenderOrder(value)\n    },\n    declutter (value) {\n      if (!this.$layer || value === this.$layer.getDeclutter()) {\n        return\n      }\n\n      this.$layer.setDeclutter(value)\n    },\n  },\n}\n"],"names":["mixins","layer","stylesContainer","props","updateWhileAnimating","Boolean","updateWhileInteracting","renderBuffer","type","Number","default","renderOrder","Function","renderMode","String","validator","value","declutter","methods","init","deinit","getServices","mergeDescriptors","getStyleTarget","$layer","mount","unmount","refresh","remount","recreate","subscribeAll","watch","getUpdateWhileAnimating","scheduleRecreate","getUpdateWhileInteracting","getRenderBuffer","isEqual","getRenderOrder","setRenderOrder","getDeclutter","setDeclutter"],"mappings":";;;;;;;;;;;;;;;;AAKA,kBAAe;EACbA,MAAM,EAAE,CAACC,KAAD,EAAQC,eAAR,CADK;EAEbC,KAAK,EAAE;;;;;;IAMLC,oBAAoB,EAAEC,OANjB;;;;;;;IAYLC,sBAAsB,EAAED,OAZnB;;;;;IAgBLE,YAAY,EAAE;MACZC,IAAI,EAAEC,MADM;MAEZC,OAAO,EAAE;KAlBN;IAoBLC,WAAW,EAAEC,QApBR;IAqBLC,UAAU,EAAE;MACVL,IAAI,EAAEM,MADI;MAEVJ,OAAO,EAAE,QAFC;MAGVK,SAAS,EAAE,mBAAAC,KAAK;;;eAAI,sCAAC,QAAD,EAAW,OAAX,kBAA6BA,KAA7B,CAAJ;;KAxBb;;;;;IA6BLC,SAAS,EAAEZ;GA/BA;EAiCba,OAAO,EAAE;;;;;IAKPC,IALO,kBAKC;aACOlB,KAAK,CAACiB,OAAN,CAAcC,IAApB,WAAP;KANK;;;;;;IAYPC,MAZO,oBAYG;aACKnB,KAAK,CAACiB,OAAN,CAAcE,MAApB,WAAP;KAbK;;;;;;IAmBPC,WAnBO,yBAmBQ;aACNC,gBAAgB,CACfrB,KAAK,CAACiB,OAAN,CAAcG,WAApB,WADqB,EAEfnB,eAAe,CAACgB,OAAhB,CAAwBG,WAA9B,WAFqB,CAAvB;KApBK;;;;;;IA6BPE,cA7BO,4BA6BW;aACT,KAAKC,MAAZ;KA9BK;;;;;;IAoCPC,KApCO,mBAoCE;aACMxB,KAAK,CAACiB,OAAN,CAAcO,KAApB,WAAP;KArCK;;;;;;IA2CPC,OA3CO,qBA2CI;aACIzB,KAAK,CAACiB,OAAN,CAAcQ,OAApB,WAAP;KA5CK;;;;;;IAkDPC,OAlDO,qBAkDI;aACI1B,KAAK,CAACiB,OAAN,CAAcS,OAApB,WAAP;KAnDK;;;;;;;IA0DPC,OA1DO,qBA0DI;aACI3B,KAAK,CAACiB,OAAN,CAAcU,OAApB,WAAP;KA3DK;;;;;;;IAkEPC,QAlEO,sBAkEK;aACG5B,KAAK,CAACiB,OAAN,CAAcU,OAApB,WAAP;KAnEK;;;;;IAwEPE,YAxEO,0BAwES;MACR7B,KAAK,CAACiB,OAAN,CAAcY,YAApB;;GA1GS;EA6GbC,KAAK,EAAE;IACL3B,oBADK,gCACiBY,KADjB,EACwB;UACvB,CAAC,KAAKQ,MAAN,IAAgBR,KAAK,KAAK,KAAKQ,MAAL,CAAYQ,uBAAZ,EAA9B,EAAqE;;;;WAIhEC,gBAAL;KANG;IAQL3B,sBARK,kCAQmBU,KARnB,EAQ0B;UACzB,CAAC,KAAKQ,MAAN,IAAgBR,KAAK,KAAK,KAAKQ,MAAL,CAAYU,yBAAZ,EAA9B,EAAuE;;;;WAIlED,gBAAL;KAbG;IAeL1B,YAfK,wBAeSS,KAfT,EAegB;UACf,CAAC,KAAKQ,MAAN,IAAgBR,KAAK,KAAK,KAAKQ,MAAL,CAAYW,eAAZ,EAA9B,EAA6D;;;;WAIxDF,gBAAL;KApBG;IAsBLtB,WAtBK,uBAsBQK,KAtBR,EAsBe;UACd,CAAC,KAAKQ,MAAN,IAAgBY,OAAO,CAACpB,KAAD,EAAQ,KAAKQ,MAAL,CAAYa,cAAZ,EAAR,CAA3B,EAAkE;;;;WAI7Db,MAAL,CAAYc,cAAZ,CAA2BtB,KAA3B;KA3BG;IA6BLC,SA7BK,qBA6BMD,KA7BN,EA6Ba;UACZ,CAAC,KAAKQ,MAAN,IAAgBR,KAAK,KAAK,KAAKQ,MAAL,CAAYe,YAAZ,EAA9B,EAA0D;;;;WAIrDf,MAAL,CAAYgB,YAAZ,CAAyBxB,KAAzB;;;CA/IN;;;;"}