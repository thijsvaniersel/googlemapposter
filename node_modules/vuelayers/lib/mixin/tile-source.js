/**
 * VueLayers
 * Web map Vue components with the power of OpenLayers
 *
 * @package vuelayers
 * @author Vladimir Vershinin <ghettovoice@gmail.com>
 * @version 0.11.24
 * @license MIT
 * @copyright (c) 2017-2020, Vladimir Vershinin <ghettovoice@gmail.com>
 */
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _bindInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/bind';
import { createTileUrlFunction } from 'ol-tilecache';
import { CACHE_SIZE, createExtentFromProjection, createXyzGrid, EPSG_3857, MAX_ZOOM, MIN_ZOOM, PIXEL_RATIO, REPROJ_ERR_THRESHOLD, TILE_SIZE } from '../ol-ext';
import { observableFromOlEvent } from '../rx-ext';
import { hasSource } from '../util/assert';
import { isEqual, isString, pick, replaceTokens } from '../util/minilo';
import { makeWatchers } from '../util/vue-helpers';
import source from './source';
import withUrl from './with-url';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source$$1 = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source$$1), true)).call(_context2, function (key) { _defineProperty(target, key, source$$1[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source$$1)); } else { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source$$1))).call(_context3, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source$$1, key)); }); } } return target; }
var tileSource = {
  mixins: [source, withUrl],
  props: {
    cacheSize: {
      type: Number,
      default: CACHE_SIZE
    },
    crossOrigin: String,
    maxZoom: {
      type: Number,
      default: MAX_ZOOM
    },
    minZoom: {
      type: Number,
      default: MIN_ZOOM
    },
    opaque: Boolean,
    projection: {
      type: String,
      default: EPSG_3857
    },
    reprojectionErrorThreshold: {
      type: Number,
      default: REPROJ_ERR_THRESHOLD
    },
    tilePixelRatio: {
      type: Number,
      default: PIXEL_RATIO
    },
    tileSize: {
      type: Array,
      default: function _default() {
        return [TILE_SIZE, TILE_SIZE];
      },
      validator: function validator(value) {
        return value.length === 2;
      }
    },

    /**
     * @type {module:ol/Tile~LoadFunction}
     */
    tileLoadFunction: Function,
    tileKey: String,

    /**
     * URL template or custom tile URL function.
     * @type {string|module:ol/Tile~UrlFunction}
     */
    url: {
      type: [String, Function],
      required: true
    },

    /**
     * Duration of the opacity transition for rendering. To disable the opacity transition, pass `0`.
     * @type {number}
     */
    transition: Number
  },
  computed: {
    /**
     * @type {string|undefined}
     */
    urlTmpl: function urlTmpl() {
      if (!isString(this.url)) {
        return;
      }

      return replaceTokens(this.url, pick(this, this.urlTokens));
    },

    /**
     * @returns {function}
     */
    urlFunc: function urlFunc() {
      if (!this.url) {
        return;
      }

      var url;

      if (this.urlTmpl != null) {
        var extent = createExtentFromProjection(this.projection);
        url = createTileUrlFunction(this.urlTmpl, this._tileGrid, extent);
      } else {
        url = this.url;
      }

      return url;
    },
    tileGridIdent: function tileGridIdent() {
      if (!this.olObjIdent) return;
      return this.makeIdent(this.olObjIdent, 'tile_grid');
    }
  },
  methods: {
    createTileGrid: function createTileGrid() {
      return createXyzGrid({
        extent: createExtentFromProjection(this.projection),
        maxZoom: this.maxZoom,
        minZoom: this.minZoom,
        tileSize: this.tileSize
      });
    },

    /**
     * @return {Promise}
     * @protected
     */
    init: function init() {
      var _context;

      /**
       * @type {module:ol/Tile~UrlFunction}
       * @protected
       */
      this._tileGrid = this.instanceFactoryCall(this.tileGridIdent, _bindInstanceProperty(_context = this.createTileGrid).call(_context, this));
      return source.methods.init.call(this);
    },

    /**
     * @return {void|Promise<void>}
     * @protected
     */
    deinit: function deinit() {
      this._tileGrid = undefined;
      return source.methods.deinit.call(this);
    },

    /**
     * @return {void}
     * @protected
     */
    mount: function mount() {
      source.methods.mount.call(this);
    },

    /**
     * @return {void}
     * @protected
     */
    unmount: function unmount() {
      source.methods.unmount.call(this);
    },
    subscribeAll: function subscribeAll() {
      source.methods.subscribeAll.call(this);
      subscribeToSourceEvents.call(this);
    }
  },
  watch: _objectSpread({
    opaque: function opaque(value) {
      if (!this.$source || value === this.$source.getOpaque()) {
        return;
      }

      this.scheduleRecreate();
    },
    tilePixelRatio: function tilePixelRatio(value) {
      if (!this.$source || value === this.$source.getOpaque()) {
        return;
      }

      this.scheduleRecreate();
    },
    tileKey: function tileKey(value) {
      if (!this.$source || value === this.$source.getKey()) {
        return;
      }

      this.$source.setKey(value);
    },
    tileLoadFunction: function tileLoadFunction(value, prevValue) {
      if (!this.$source || isEqual(value, prevValue)) return;
      this.$source.setTileLoadFunction(value);
    },
    urlFunc: function urlFunc(value) {
      if (!this.$source) return;
      this.$source.setTileUrlFunction(value);
      this.scheduleRefresh();
    }
  }, makeWatchers(['cacheSize', 'crossOrigin', 'reprojectionErrorThreshold', 'transition', 'maxZoom', 'minZoom', 'tileSize'], function () {
    return function () {
      this.scheduleRecreate();
    };
  }))
};

function subscribeToSourceEvents() {
  var _this = this;

  hasSource(this);
  var events = observableFromOlEvent(this.$source, ['tileloadstart', 'tileloadend', 'tileloaderror']);
  this.subscribeTo(events, function (evt) {
    _this.$emit(evt.type, evt);
  });
}

export default tileSource;
