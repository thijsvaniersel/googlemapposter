/**
 * VueLayers
 * Web map Vue components with the power of OpenLayers
 *
 * @package vuelayers
 * @author Vladimir Vershinin <ghettovoice@gmail.com>
 * @version 0.11.24
 * @license MIT
 * @copyright (c) 2017-2020, Vladimir Vershinin <ghettovoice@gmail.com>
 */
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _regeneratorRuntime from '@babel/runtime-corejs3/regenerator';
import _asyncToGenerator from '@babel/runtime-corejs3/helpers/esm/asyncToGenerator';
import _Object$values from '@babel/runtime-corejs3/core-js-stable/object/values';
import _includesInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/includes';
import { noModifierKeys, shiftKeyOnly } from 'ol/events/condition';
import { Collection } from 'ol';
import { Draw } from 'ol/interaction';
import { Vector } from 'ol/source';
import { merge } from 'rxjs/_esm5/internal/observable/merge';
import { map } from 'rxjs/_esm5/internal/operators/map';
import { interaction, stylesContainer } from '../mixin';
import { createStyle, defaultEditStyle, GEOMETRY_TYPE, initializeFeature } from '../ol-ext';
import { observableFromOlEvent } from '../rx-ext';
import { hasInteraction, instanceOf } from '../util/assert';
import { camelCase, mapValues, upperFirst, pick } from '../util/minilo';
import mergeDescriptors from '../util/multi-merge-descriptors';
import { makeWatchers } from '../util/vue-helpers';
import '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _Object$assign from '@babel/runtime-corejs3/core-js-stable/object/assign';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

var transformType = function transformType(type) {
  return upperFirst(camelCase(type));
};
/**
 * @alias module:draw-interaction/interaction
 * @title vl-interaction-draw
 * @vueProto
 */


var script = {
  name: 'vl-interaction-draw',
  mixins: [interaction, stylesContainer],
  stubVNode: {
    empty: false,
    attrs: function attrs() {
      return {
        id: this.vmId,
        class: this.cmpName
      };
    }
  },
  props: {
    /**
     * Target source or collection identifier from IdentityMap.
     * @type {String}
     */
    source: {
      type: String,
      required: true
    },

    /**
     * The maximum distance in pixels between "down" and "up" for a "up" event to be considered a "click" event and
     * actually add a point/vertex to the geometry being drawn. Default is 6 pixels. That value was chosen for the
     * draw interaction to behave correctly on mouse as well as on touch devices.
     * @type {number}
     */
    clickTolerance: {
      type: Number,
      default: 6
    },

    /**
     * Pixel distance for snapping to the drawing finish.
     * @type {number}
     */
    snapTolerance: {
      type: Number,
      default: 12
    },

    /**
     * Drawing type ('Point', 'LineString', 'Polygon', 'MultiPoint', 'MultiLineString', 'MultiPolygon' or 'Circle').
     * @type {string}
     */
    type: {
      type: String,
      required: true,
      validator: function validator(value) {
        var _context;

        return _includesInstanceProperty(_context = _Object$values(GEOMETRY_TYPE)).call(_context, transformType(value));
      }
    },

    /**
     * Stop click, singleclick, and doubleclick events from firing during drawing.
     * @type {boolean}
     */
    stopClick: {
      type: Boolean,
      default: false
    },

    /**
     * The number of points that can be drawn before a polygon ring or line string is finished.
     * @type {number|undefined}
     */
    maxPoints: Number,

    /**
     * The number of points that must be drawn before a polygon ring or line string can be finished.
     * Default is `3` for polygon rings and `2` for line strings.
     * @type {number|undefined}
     */
    minPoints: Number,

    /**
     * A function that takes an ol.MapBrowserEvent and returns a boolean to indicate whether the drawing can be finished.
     * @type {function|undefined}
     */
    finishCondition: Function,

    /**
     * Function that is called when a geometry's coordinates are updated.
     * @type {function|undefined}
     */
    geometryFunction: Function,

    /**
     * Name of the geometry attribute for newly created features.
     * @type {string}
     */
    geometryName: {
      type: String,
      default: 'geometry'
    },

    /**
     * A function that takes an `ol.MapBrowserEvent` and returns a boolean to indicate whether that event should be handled.
     * By default `ol.events.condition.noModifierKeys`, i.e. a click, adds a vertex or deactivates freehand drawing.
     * @type {function|undefined}
     */
    condition: {
      type: Function,
      default: noModifierKeys
    },

    /**
     * Operate in freehand mode for lines, polygons, and circles. This makes the interaction always operate in
     * freehand mode and takes precedence over any `freehandCondition` option.
     * @type {boolean}
     */
    freehand: {
      type: Boolean,
      default: false
    },

    /**
     * Condition that activates freehand drawing for lines and polygons. This function takes an `ol.MapBrowserEvent` and
     * returns a boolean to indicate whether that event should be handled. The default is `ol.events.condition.shiftKeyOnly`,
     * meaning that the Shift key activates freehand drawing.
     * @type {function|undefined}
     */
    freehandCondition: {
      type: Function,
      default: shiftKeyOnly
    },

    /**
     * Wrap the world horizontally on the sketch overlay.
     * @type {boolean}
     */
    wrapX: {
      type: Boolean,
      default: false
    }
  },
  methods: {
    /**
     * @return {Promise<Draw>}
     * @protected
     */
    createInteraction: function createInteraction() {
      var _this = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var source;
        return _regeneratorRuntime.wrap(function _callee$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _this.getInstance(_this.source);

              case 2:
                source = _context2.sent;
                instanceOf(source, Vector, "Source \"".concat(_this.source, "\" doesn't exists in the identity map."));
                instanceOf(source.getFeaturesCollection(), Collection, "Source \"".concat(_this.source, "\" doesn't provide features collection."));
                return _context2.abrupt("return", new Draw({
                  features: source.getFeaturesCollection(),
                  clickTolerance: _this.clickTolerance,
                  snapTolerance: _this.snapTolerance,
                  type: transformType(_this.type),
                  stopClick: _this.stopClick,
                  maxPoints: _this.maxPoints,
                  minPoints: _this.minPoints,
                  finishCondition: _this.finishCondition,
                  style: _this.createStyleFunc(),
                  geometryFunction: _this.geometryFunction,
                  geometryName: _this.geometryName,
                  condition: _this.condition,
                  freehand: _this.freehand,
                  freehandCondition: _this.freehandCondition,
                  wrapX: _this.wrapX
                }));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee);
      }))();
    },

    /**
     * @return {function(feature: Feature): Style}
     * @protected
     */
    getDefaultStyles: function getDefaultStyles() {
      var defaultStyles = mapValues(defaultEditStyle(), function (styles) {
        return _mapInstanceProperty(styles).call(styles, createStyle);
      });
      return function __selectDefaultStyleFunc(feature) {
        if (feature.getGeometry()) {
          return defaultStyles[feature.getGeometry().getType()];
        }
      };
    },

    /**
     * @returns {Object}
     * @protected
     */
    getServices: function getServices() {
      return mergeDescriptors(interaction.methods.getServices.call(this), stylesContainer.methods.getServices.call(this));
    },

    /**
     * @return {Interaction|undefined}
     * @protected
     */
    getStyleTarget: function getStyleTarget() {
      return this.$interaction;
    },

    /**
     * @return {void}
     * @protected
     */
    mount: function mount() {
      interaction.methods.mount.call(this);
    },

    /**
     * @return {void}
     * @protected
     */
    unmount: function unmount() {
      interaction.methods.unmount.call(this);
    },

    /**
     * @param {Array<{style: Style, condition: (function|boolean|undefined)}>|function(feature: Feature): Style|Vue|undefined} styles
     * @return {void}
     * @protected
     */
    setStyle: function setStyle(styles) {
      if (styles !== this._styles) {
        this._styles = styles;
        this.scheduleRecreate();
      }
    },

    /**
     * @return {void}
     * @protected
     */
    subscribeAll: function subscribeAll() {
      interaction.methods.subscribeAll.call(this);
      subscribeToInteractionChanges.call(this);
    }
  },
  watch: _objectSpread({}, makeWatchers(['source', 'clickTolerance', 'snapTolerance', 'type', 'stopClick', 'maxPoints', 'minPoints', 'finishCondition', 'geometryFunction', 'geometryName', 'condition', 'freehand', 'freehandCondition', 'wrapX'], function () {
    return function () {
      this.scheduleRecreate();
    };
  }))
};
/**
 * @return {void}
 * @private
 */

function subscribeToInteractionChanges() {
  var _this2 = this;

  hasInteraction(this);
  var drawEvents = merge(observableFromOlEvent(this.$interaction, 'drawstart').pipe(map(function (evt) {
    initializeFeature(evt.feature);
    return evt;
  })), observableFromOlEvent(this.$interaction, 'drawend'));
  this.subscribeTo(drawEvents, function (evt) {
    ++_this2.rev;

    _this2.$nextTick(function () {
      _this2.$emit(evt.type, evt);
    });
  });
}

var __vue_script__ = script;
/* template */

/* style */

var __vue_inject_styles__ = undefined;
/* scoped */

var __vue_scope_id__ = undefined;
/* module identifier */

var __vue_module_identifier__ = undefined;
/* functional template */

var __vue_is_functional_template__ = undefined;
/* component normalizer */

function __vue_normalize__(template, style, script$$1, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
  var component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {}; // For security concerns, we use only base name in production mode.

  component.__file = "interaction.vue";

  if (!component.render) {
    component.render = template.render;
    component.staticRenderFns = template.staticRenderFns;
    component._compiled = true;
    if (functional) component.functional = true;
  }

  component._scopeId = scope;

  return component;
}
/* style inject */

/* style inject SSR */


var Interaction = __vue_normalize__({}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);

function plugin(Vue) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (plugin.installed) {
    return;
  }

  plugin.installed = true;
  options = pick(options, 'dataProjection');

  _Object$assign(Interaction, options);

  Vue.component(Interaction.name, Interaction);
}

export default plugin;
export { Interaction, plugin as install };
