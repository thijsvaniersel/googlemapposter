{"version":3,"file":"geom.js","sources":["src/ol-ext/geom.js"],"sourcesContent":["import Vue from 'vue'\nimport Geometry from 'ol/geom/Geometry'\nimport uuid from 'uuid/v4'\nimport pointOnFeature from '@turf/point-on-feature'\nimport Circle from 'ol/geom/Circle'\nimport GeometryCollection from 'ol/geom/GeometryCollection'\nimport LineString from 'ol/geom/LineString'\nimport MultiLineString from 'ol/geom/MultiLineString'\nimport MultiPoint from 'ol/geom/MultiPoint'\nimport MultiPolygon from 'ol/geom/MultiPolygon'\nimport Point from 'ol/geom/Point'\nimport Polygon, { circular as circularPolygon } from 'ol/geom/Polygon'\nimport { GEOMETRY_TYPE } from './consts'\n\n/**\n * @param {number|number[]} lonOrCoordinates\n * @param {number} [lat]\n * @return {Point}\n */\nexport function createPointGeom (lonOrCoordinates, lat) {\n  const coordinates = Array.isArray(lonOrCoordinates)\n    ? lonOrCoordinates\n    : [lonOrCoordinates, lat]\n\n  return new Point(coordinates)\n}\n\n/**\n * @param {Array<number[]>} points\n * @returns {LineString}\n */\nexport function createLineGeom (points) {\n  return new LineString(points)\n}\n\n/**\n * @param {Array<Array<number[]>>} rings\n * @returns {Polygon}\n */\nexport function createPolygonGeom (rings) {\n  return new Polygon(rings)\n}\n\n/**\n * @param {Array<number[]>} points\n * @returns {MultiPoint}\n */\nexport function createMultiPointGeom (points) {\n  return new MultiPoint(points)\n}\n\n/**\n * @param {Array<Array<number[]>>} lines\n * @returns {MultiLineString}\n */\nexport function createMultiLineGeom (lines) {\n  return new MultiLineString(lines)\n}\n\n/**\n * @param {Array<Array<Array<number[]>>>} polygons\n * @returns {MultiPolygon}\n */\nexport function createMultiPolygonGeom (polygons) {\n  return new MultiPolygon(polygons)\n}\n\n/**\n * @param {Geometry[]} geoms\n * @returns {GeometryCollection}\n */\nexport function createGeomCollection (geoms) {\n  return new GeometryCollection(geoms)\n}\n\n/**\n * @param {Coordinate|number[]} center\n * @param {number} radius\n * @return {Polygon}\n */\nexport function createCircularPolygon (center, radius) {\n  return circularPolygon(center, radius)\n}\n\n/**\n * @param {Geometry|Object} geom\n * @return {boolean}\n * @throws {Error}\n */\nexport function isMultiGeom (geom) {\n  let multiTypes = [\n    GEOMETRY_TYPE.MULTI_POINT,\n    GEOMETRY_TYPE.MULTI_LINE_STRING,\n    GEOMETRY_TYPE.MULTI_POLYGON,\n    GEOMETRY_TYPE.GEOMETRY_COLLECTION,\n  ]\n\n  return multiTypes.includes(geom.type || geom.getType())\n}\n\n/**\n * @param {Geometry|Object} geom\n * @return {SimpleGeometry|Object}\n * @throws {Error}\n */\nexport function toSimpleGeom (geom) {\n  if (geom instanceof Circle) {\n    geom = createPointGeom(geom.getCenter())\n  }\n\n  const type = geom.type || geom.getType()\n  const complexTypes = [\n    GEOMETRY_TYPE.GEOMETRY_COLLECTION,\n  ]\n\n  if (complexTypes.includes(type) === false) {\n    return geom\n  }\n\n  return (geom.geometries || geom.getGeometries())[0]\n}\n\n/**\n * @param {Geometry|Object} geom\n * @return {Coordinate|undefined}\n */\nexport function findPointOnSurface (geom) {\n  const simpleGeom = toSimpleGeom(geom)\n  const pointFeature = pointOnFeature({\n    type: simpleGeom.type || simpleGeom.getType(),\n    coordinates: simpleGeom.coordinates || simpleGeom.getCoordinates(),\n  })\n\n  if (pointFeature && pointFeature.geometry) {\n    return pointFeature.geometry.coordinates\n  }\n}\n\nexport function getGeometryId (geometry) {\n  if (geometry instanceof Vue) {\n    return geometry.id\n  } else if (geometry instanceof Geometry) {\n    return geometry.get('id')\n  }\n\n  throw new Error('Illegal geometry argument')\n}\n\nexport function setGeometryId (geometry, geometryId) {\n  if (geometry instanceof Vue) {\n    geometry.id = geometryId\n\n    return geometry\n  } else if (geometry instanceof Geometry) {\n    geometry.set('id', geometryId)\n\n    return geometry\n  }\n\n  throw new Error('Illegal geometry argument')\n}\n\nexport function initializeGeometry (geometry, defaultGeometryId) {\n  if (getGeometryId(geometry) == null) {\n    setGeometryId(geometry, defaultGeometryId || uuid())\n  }\n\n  return geometry\n}\n"],"names":["createPointGeom","lonOrCoordinates","lat","coordinates","Point","createLineGeom","points","LineString","createPolygonGeom","rings","Polygon","createMultiPointGeom","MultiPoint","createMultiLineGeom","lines","MultiLineString","createMultiPolygonGeom","polygons","MultiPolygon","createGeomCollection","geoms","GeometryCollection","createCircularPolygon","center","radius","circularPolygon","isMultiGeom","geom","multiTypes","GEOMETRY_TYPE","MULTI_POINT","MULTI_LINE_STRING","MULTI_POLYGON","GEOMETRY_COLLECTION","type","getType","toSimpleGeom","Circle","getCenter","complexTypes","geometries","getGeometries","findPointOnSurface","simpleGeom","pointFeature","pointOnFeature","getCoordinates","geometry","getGeometryId","Vue","id","Geometry","get","Error","setGeometryId","geometryId","set","initializeGeometry","defaultGeometryId","uuid"],"mappings":"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"}