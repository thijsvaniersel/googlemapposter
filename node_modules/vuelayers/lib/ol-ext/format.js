/**
 * VueLayers
 * Web map Vue components with the power of OpenLayers
 *
 * @package vuelayers
 * @author Vladimir Vershinin <ghettovoice@gmail.com>
 * @version 0.11.27
 * @license MIT
 * @copyright (c) 2017-2020, Vladimir Vershinin <ghettovoice@gmail.com>
 */
import _Reflect$construct from '@babel/runtime-corejs3/core-js-stable/reflect/construct';
import _classCallCheck from '@babel/runtime-corejs3/helpers/esm/classCallCheck';
import _createClass from '@babel/runtime-corejs3/helpers/esm/createClass';
import _get from '@babel/runtime-corejs3/helpers/esm/get';
import _inherits from '@babel/runtime-corejs3/helpers/esm/inherits';
import _possibleConstructorReturn from '@babel/runtime-corejs3/helpers/esm/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime-corejs3/helpers/esm/getPrototypeOf';
import BaseGeoJSON from 'ol/format/GeoJSON';
import MVT from 'ol/format/MVT';
import TopoJSON from 'ol/format/TopoJSON';
import { isEmpty } from '../util/minilo';
import { EPSG_4326 } from './consts';
import { createCircularPolygon } from './geom';
import { transformPoint } from './proj';
import { isCircle } from './util';
import LineString from 'ol/geom/LineString';
import { getLength } from 'ol/sphere';

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }
/**
 * @param {Object} [options]
 * @return {GeoJSON}
 */

function createGeoJsonFmt(options) {
  return new GeoJSON(options);
}
/**
 * @param {Object} [options]
 * @return {TopoJSON}
 */

function createTopoJsonFmt(options) {
  return new TopoJSON(options);
}
/**
 * @param [options]
 * @return {MVT}
 */

function createMvtFmt(options) {
  return new MVT(options);
}

var GeoJSON = /*#__PURE__*/function (_BaseGeoJSON) {
  _inherits(GeoJSON, _BaseGeoJSON);

  var _super = _createSuper(GeoJSON);

  function GeoJSON() {
    _classCallCheck(this, GeoJSON);

    return _super.apply(this, arguments);
  }

  _createClass(GeoJSON, [{
    key: "writeGeometryObject",
    value: function writeGeometryObject(geometry, options) {
      if (isCircle(geometry)) {
        var start = geometry.getCenter();
        var end = [start[0] + geometry.getRadius(), start[1]];
        var radius = getLength(new LineString([start, end]), options.featureProjection || this.defaultFeatureProjection);
        geometry = createCircularPolygon(transformPoint(geometry.getCenter(), options.featureProjection || this.defaultFeatureProjection, EPSG_4326), radius);
        options.featureProjection = EPSG_4326;
      }

      return _get(_getPrototypeOf(GeoJSON.prototype), "writeGeometryObject", this).call(this, geometry, options);
    }
  }, {
    key: "writeFeatureObject",
    value: function writeFeatureObject(feature, options) {
      var object =
      /** @type {Object} */
      {
        'type': 'Feature'
      };
      var id = feature.getId();

      if (id !== undefined) {
        object.id = id;
      }

      var geometry = feature.getGeometry();

      if (geometry) {
        object.geometry = this.writeGeometryObject(geometry, options);
      } else {
        object.geometry = null;
      }

      var properties = feature.getProperties();
      delete properties[feature.getGeometryName()];

      if (!isEmpty(properties)) {
        object.properties = properties;
      } else {
        object.properties = null;
      }

      return object;
    }
  }]);

  return GeoJSON;
}(BaseGeoJSON);

export { createGeoJsonFmt, createTopoJsonFmt, createMvtFmt };
