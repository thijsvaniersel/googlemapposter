/**
 * VueLayers
 * Web map Vue components with the power of OpenLayers
 *
 * @package vuelayers
 * @author Vladimir Vershinin <ghettovoice@gmail.com>
 * @version 0.11.27
 * @license MIT
 * @copyright (c) 2017-2020, Vladimir Vershinin <ghettovoice@gmail.com>
 */
import _includesInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/includes';
import _Array$isArray from '@babel/runtime-corejs3/core-js-stable/array/is-array';
import Vue from 'vue';
import Geometry from 'ol/geom/Geometry';
import uuid from 'uuid/v4';
import pointOnFeature from '@turf/point-on-feature';
import Circle from 'ol/geom/Circle';
import GeometryCollection from 'ol/geom/GeometryCollection';
import LineString from 'ol/geom/LineString';
import MultiLineString from 'ol/geom/MultiLineString';
import MultiPoint from 'ol/geom/MultiPoint';
import MultiPolygon from 'ol/geom/MultiPolygon';
import Point from 'ol/geom/Point';
import Polygon, { circular } from 'ol/geom/Polygon';
import { GEOMETRY_TYPE } from './consts';

/**
 * @param {number|number[]} lonOrCoordinates
 * @param {number} [lat]
 * @return {Point}
 */

function createPointGeom(lonOrCoordinates, lat) {
  var coordinates = _Array$isArray(lonOrCoordinates) ? lonOrCoordinates : [lonOrCoordinates, lat];
  return new Point(coordinates);
}
/**
 * @param {Array<number[]>} points
 * @returns {LineString}
 */

function createLineGeom(points) {
  return new LineString(points);
}
/**
 * @param {Array<Array<number[]>>} rings
 * @returns {Polygon}
 */

function createPolygonGeom(rings) {
  return new Polygon(rings);
}
/**
 * @param {Array<number[]>} points
 * @returns {MultiPoint}
 */

function createMultiPointGeom(points) {
  return new MultiPoint(points);
}
/**
 * @param {Array<Array<number[]>>} lines
 * @returns {MultiLineString}
 */

function createMultiLineGeom(lines) {
  return new MultiLineString(lines);
}
/**
 * @param {Array<Array<Array<number[]>>>} polygons
 * @returns {MultiPolygon}
 */

function createMultiPolygonGeom(polygons) {
  return new MultiPolygon(polygons);
}
/**
 * @param {Geometry[]} geoms
 * @returns {GeometryCollection}
 */

function createGeomCollection(geoms) {
  return new GeometryCollection(geoms);
}
/**
 * @param {Coordinate|number[]} center
 * @param {number} radius
 * @return {Polygon}
 */

function createCircularPolygon(center, radius) {
  return circular(center, radius);
}
/**
 * @param {Geometry|Object} geom
 * @return {boolean}
 * @throws {Error}
 */

function isMultiGeom(geom) {
  var multiTypes = [GEOMETRY_TYPE.MULTI_POINT, GEOMETRY_TYPE.MULTI_LINE_STRING, GEOMETRY_TYPE.MULTI_POLYGON, GEOMETRY_TYPE.GEOMETRY_COLLECTION];
  return _includesInstanceProperty(multiTypes).call(multiTypes, geom.type || geom.getType());
}
/**
 * @param {Geometry|Object} geom
 * @return {SimpleGeometry|Object}
 * @throws {Error}
 */

function toSimpleGeom(geom) {
  if (geom instanceof Circle) {
    geom = createPointGeom(geom.getCenter());
  }

  var type = geom.type || geom.getType();
  var complexTypes = [GEOMETRY_TYPE.GEOMETRY_COLLECTION];

  if (_includesInstanceProperty(complexTypes).call(complexTypes, type) === false) {
    return geom;
  }

  return (geom.geometries || geom.getGeometries())[0];
}
/**
 * @param {Geometry|Object} geom
 * @return {Coordinate|undefined}
 */

function findPointOnSurface(geom) {
  var simpleGeom = toSimpleGeom(geom);
  var pointFeature = pointOnFeature({
    type: simpleGeom.type || simpleGeom.getType(),
    coordinates: simpleGeom.coordinates || simpleGeom.getCoordinates()
  });

  if (pointFeature && pointFeature.geometry) {
    return pointFeature.geometry.coordinates;
  }
}
function getGeometryId(geometry) {
  if (geometry instanceof Vue) {
    return geometry.id;
  } else if (geometry instanceof Geometry) {
    return geometry.get('id');
  }

  throw new Error('Illegal geometry argument');
}
function setGeometryId(geometry, geometryId) {
  if (geometry instanceof Vue) {
    geometry.id = geometryId;
    return geometry;
  } else if (geometry instanceof Geometry) {
    geometry.set('id', geometryId);
    return geometry;
  }

  throw new Error('Illegal geometry argument');
}
function initializeGeometry(geometry, defaultGeometryId) {
  if (getGeometryId(geometry) == null) {
    setGeometryId(geometry, defaultGeometryId || uuid());
  }

  return geometry;
}

export { createPointGeom, createLineGeom, createPolygonGeom, createMultiPointGeom, createMultiLineGeom, createMultiPolygonGeom, createGeomCollection, createCircularPolygon, isMultiGeom, toSimpleGeom, findPointOnSurface, getGeometryId, setGeometryId, initializeGeometry };
