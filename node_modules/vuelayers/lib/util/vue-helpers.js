/**
 * VueLayers
 * Web map Vue components with the power of OpenLayers
 *
 * @package vuelayers
 * @author Vladimir Vershinin <ghettovoice@gmail.com>
 * @version 0.11.24
 * @license MIT
 * @copyright (c) 2017-2020, Vladimir Vershinin <ghettovoice@gmail.com>
 */
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _includesInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/includes';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _reduceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/reduce';

/**
 * Constructs watch hash for multiple properties.
 * @param {string[]} props
 * @param {function|Object} watcherFactory
 */
function makeWatchers(props, watcherFactory) {
  return _reduceInstanceProperty(props).call(props, function (hash, prop) {
    hash[prop] = watcherFactory(prop);
    return hash;
  }, {});
}
function extractChildren(slots) {
  var _context;

  var slotNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return _reduceInstanceProperty(_context = _Object$keys(slots)).call(_context, function (all, name) {
    if (!slotNames.length || _includesInstanceProperty(slotNames).call(slotNames, name)) {
      all = _concatInstanceProperty(all).call(all, slots[name]);
    }

    return all;
  }, []);
}

export { makeWatchers, extractChildren };
