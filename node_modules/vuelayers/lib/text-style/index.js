/**
 * VueLayers
 * Web map Vue components with the power of OpenLayers
 *
 * @package vuelayers
 * @author Vladimir Vershinin <ghettovoice@gmail.com>
 * @version 0.11.27
 * @license MIT
 * @copyright (c) 2017-2020, Vladimir Vershinin <ghettovoice@gmail.com>
 */
import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import Vue from 'vue';
import Text from 'ol/style/Text';
import { style, withFillStrokeStyle } from '../mixin';
import { isEqual, pick } from '../util/minilo';
import mergeDescriptors from '../util/multi-merge-descriptors';
import '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _Object$assign from '@babel/runtime-corejs3/core-js-stable/object/assign';

var props = {
  font: {
    type: String,
    default: '10px sans-serif' // css font format https://developer.mozilla.org/en-US/docs/Web/CSS/font?v=control

  },
  maxAngle: Number,
  placement: String,
  offsetX: {
    type: Number,
    default: 0
  },
  offsetY: {
    type: Number,
    default: 0
  },
  overflow: Boolean,
  rotateWithView: {
    type: Boolean,
    default: false
  },
  rotation: {
    type: Number,
    default: 0
  },
  scale: {
    type: Number,
    default: 1
  },
  text: String,
  textAlign: String,
  // left, right, center, end, start
  textBaseline: String,
  // bottom, top, middle, alphabetic, hanging, ideographic
  padding: {
    type: Array,
    default: function _default() {
      return [0, 0, 0, 0];
    },
    validate: function validate(val) {
      return val.length && val.length === 4;
    }
  }
};
var methods = {
  /**
   * @returns {Text}
   * @protected
   */
  createStyle: function createStyle() {
    return new Text({
      font: this.font,
      maxAngle: this.maxAngle,
      placement: this.placement,
      offsetX: this.offsetX,
      offsetY: this.offsetY,
      overflow: this.overflow,
      rotateWithView: this.rotateWithView,
      rotation: this.rotation,
      scale: this.scale,
      text: this.text,
      textAlign: this.textAlign,
      textBaseline: this.textBaseline,
      fill: this._fill,
      stroke: this._stroke,
      padding: this.padding
    });
  },

  /**
   * @return {void}
   * @protected
   */
  mount: function mount() {
    this.$stylesContainer && this.$stylesContainer.setText(this);
  },

  /**
   * @return {void}
   * @protected
   */
  unmount: function unmount() {
    this.$stylesContainer && this.$stylesContainer.setText(undefined);
  },

  /**
   * @returns {Object}
   * @protected
   */
  getServices: function getServices() {
    var vm = this;
    return mergeDescriptors(style.methods.getServices.call(this), {
      get stylesContainer() {
        return vm;
      }

    });
  },

  /**
   * @param {Fill|Vue|undefined} fill
   * @return {void}
   * @protected
   */
  setFill: function setFill(fill) {
    var _context;

    if (!(fill instanceof Vue)) {
      withFillStrokeStyle.methods.setFill.call(this, fill);
    }

    var isBg = _findInstanceProperty(_context = this.$slots.background || []).call(_context, function (vnode) {
      return vnode.componentInstance && vnode.componentInstance === fill;
    });

    if (!isBg) {
      withFillStrokeStyle.methods.setFill.call(this, fill);
      return;
    }

    fill = fill.$style;

    if (this.$style && fill !== this.$style.getBackgroundFill()) {
      this.$style.setBackgroundFill(fill);
      this.scheduleRefresh();
    }
  },

  /**
   * @param {Stroke|Vue|undefined} stroke
   * @return {void}
   * @protected
   */
  setStroke: function setStroke(stroke) {
    var _context2;

    if (!(stroke instanceof Vue)) {
      withFillStrokeStyle.methods.setStroke.call(this, stroke);
    }

    var isBg = _findInstanceProperty(_context2 = this.$slots.background || []).call(_context2, function (vnode) {
      return vnode.componentInstance && vnode.componentInstance === stroke;
    });

    if (!isBg) {
      withFillStrokeStyle.methods.setStroke.call(this, stroke);
      return;
    }

    stroke = stroke.$style;

    if (this.$style && stroke !== this.$style.getBackgroundStroke()) {
      this.$style.setBackgroundStroke(stroke);
      this.scheduleRefresh();
    }
  }
};
var watch = {
  font: function font(value) {
    if (this.$style && !isEqual(value, this.$style.getFont())) {
      this.$style.setFont(value);
      this.scheduleRefresh();
    }
  },
  maxAngle: function maxAngle(value) {
    if (this.$style && !isEqual(value, this.$style.getMaxAngle())) {
      this.$style.setMaxAngle(value);
      this.scheduleRefresh();
    }
  },
  placement: function placement(value) {
    if (this.$style && !isEqual(value, this.$style.getPlacement())) {
      this.$style.setFont(value);
      this.scheduleRefresh();
    }
  },
  offsetX: function offsetX(value) {
    if (this.$style && !isEqual(value, this.$style.getOffsetX())) {
      this.$style.setOffsetX(value);
      this.scheduleRefresh();
    }
  },
  offsetY: function offsetY(value) {
    if (this.$style && !isEqual(value, this.$style.getOffsetY())) {
      this.$style.setOffsetY(value);
      this.scheduleRefresh();
    }
  },
  overflow: function overflow(value) {
    if (this.$style && !isEqual(value, this.$style.getOverflow())) {
      this.$style.setOverflow(value);
      this.scheduleRefresh();
    }
  },
  rotation: function rotation(value) {
    if (this.$style && !isEqual(value, this.$style.getRotation())) {
      this.$style.setRotation(value);
      this.scheduleRefresh();
    }
  },
  rotateWithView: function rotateWithView(value) {
    if (this.$style && !isEqual(value, this.$style.getRotateWithView())) {
      this.$style.setRotation(value);
      this.scheduleRefresh();
    }
  },
  scale: function scale(value) {
    if (this.$style && !isEqual(value, this.$style.getScale())) {
      this.$style.setScale(value);
      this.scheduleRefresh();
    }
  },
  text: function text(value) {
    if (this.$style && !isEqual(value, this.$style.getText())) {
      this.$style.setText(value);
      this.scheduleRefresh();
    }
  },
  textAlign: function textAlign(value) {
    if (this.$style && !isEqual(value, this.$style.getTextAlign())) {
      this.$style.setTextAlign(value);
      this.scheduleRefresh();
    }
  },
  textBaseline: function textBaseline(value) {
    if (this.$style && !isEqual(value, this.$style.getTextBaseline())) {
      this.$style.setTextBaseline(value);
      this.scheduleRefresh();
    }
  },
  padding: function padding(value) {
    if (this.$style && !isEqual(value, this.$style.getPadding())) {
      this.$style.setPadding(value);
      this.scheduleRefresh();
    }
  }
};
var script = {
  name: 'vl-style-text',
  mixins: [style, withFillStrokeStyle],
  props: props,
  methods: methods,
  watch: watch,
  stubVNode: {
    empty: false,
    attrs: function attrs() {
      return {
        id: this.vmId,
        class: this.cmpName
      };
    }
  }
};

var __vue_script__ = script;
/* template */

var __vue_render__ = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('i', {
    class: _vm.cmpName,
    staticStyle: {
      "display": "none !important"
    },
    attrs: {
      "id": _vm.vmId
    }
  }, [_vm._t("default"), _vm._v(" "), _vm._t("background")], 2);
};

var __vue_staticRenderFns__ = [];
/* style */

var __vue_inject_styles__ = undefined;
/* scoped */

var __vue_scope_id__ = undefined;
/* module identifier */

var __vue_module_identifier__ = undefined;
/* functional template */

var __vue_is_functional_template__ = false;
/* component normalizer */

function __vue_normalize__(template, style$$1, script$$1, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
  var component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {}; // For security concerns, we use only base name in production mode.

  component.__file = "style.vue";

  if (!component.render) {
    component.render = template.render;
    component.staticRenderFns = template.staticRenderFns;
    component._compiled = true;
    if (functional) component.functional = true;
  }

  component._scopeId = scope;

  return component;
}
/* style inject */

/* style inject SSR */


var Style = __vue_normalize__({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);

function plugin(Vue$$1) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (plugin.installed) {
    return;
  }

  plugin.installed = true;
  options = pick(options, 'dataProjection');

  _Object$assign(Style, options);

  Vue$$1.component(Style.name, Style);
}

export default plugin;
export { Style, plugin as install };
