{"version":3,"file":"index.js","sources":["src/component/overlay/overlay.vue?rollup-plugin-vue=script.js","src/component/overlay/overlay.vue","src/component/overlay/index.js"],"sourcesContent":["//\n//\n//\n//\n//\n//\n\nimport Overlay from 'ol/Overlay'\nimport { merge as mergeObs } from 'rxjs/observable'\nimport { olCmp, projTransforms, useMapCmp } from '../../mixin'\nimport { getOverlayId, initializeOverlay, OVERLAY_POSITIONING, setOverlayId } from '../../ol-ext'\nimport { observableFromOlChangeEvent } from '../../rx-ext'\nimport { hasOverlay } from '../../util/assert'\nimport { isEqual, identity } from '../../util/minilo'\n\nconst props = {\n  offset: {\n    type: Array,\n    default: () => [0, 0],\n    validator: value => value.length === 2,\n  },\n  /**\n   * Coordinates in the map view projection.\n   * @type {number[]}\n   */\n  position: {\n    type: Array,\n    validator: value => value.length === 2,\n    required: true,\n  },\n  positioning: {\n    type: String,\n    default: OVERLAY_POSITIONING.TOP_LEFT,\n    validator: value => Object.values(OVERLAY_POSITIONING).includes(value),\n  },\n  stopEvent: {\n    type: Boolean,\n    default: true,\n  },\n  insertFirst: {\n    type: Boolean,\n    default: true,\n  },\n  autoPan: {\n    type: Boolean,\n    default: false,\n  },\n  autoPanMargin: {\n    type: Number,\n    default: 20,\n  },\n  autoPanAnimation: Object,\n  className: String,\n}\n\nconst computed = {\n  positionViewProj () {\n    if (this.rev && this.$overlay) {\n      return this.$overlay.getPosition()\n    }\n  },\n  positionDataProj () {\n    if (this.rev && this.$overlay) {\n      return this.pointToDataProj(this.$overlay.getPosition())\n    }\n  },\n  classes () {\n    return [\n      this.cmpName,\n      this.visible ? 'visible' : undefined,\n    ].filter(identity)\n  },\n}\n\nconst methods = {\n  /**\n   * @return {module:ol/Overlay~Overlay}\n   * @protected\n   */\n  createOlObject () {\n    const overlay = new Overlay({\n      id: this.id,\n      offset: this.offset,\n      position: this.pointToViewProj(this.position),\n      positioning: this.positioning,\n      stopEvent: this.stopEvent,\n      insertFirst: this.insertFirst,\n      autoPan: this.autoPan,\n      autoPanMargin: this.autoPanMargin,\n      autoPanAnimation: this.autoPanAnimation,\n      className: this.className,\n    })\n\n    initializeOverlay(overlay, this.id)\n\n    return overlay\n  },\n  /**\n   * @return {void}\n   * @protected\n   */\n  mount () {\n    hasOverlay(this)\n\n    this.$overlay.setElement(this.$el)\n    this.$overlaysContainer && this.$overlaysContainer.addOverlay(this.$overlay)\n    // reset position to trigger panIntoView\n    this.$nextTick(() => {\n      this.$overlay.setPosition(this.positionViewProj.slice())\n      this.visible = true\n    })\n    this.subscribeAll()\n  },\n  /**\n   * @return {void}\n   * @protected\n   */\n  unmount () {\n    hasOverlay(this)\n\n    this.unsubscribeAll()\n    this.$overlay.setElement(undefined)\n    this.$overlaysContainer && this.$overlaysContainer.removeOverlay(this.$overlay)\n\n    this.visible = false\n  },\n  /**\n   * @return {void}\n   * @protected\n   */\n  subscribeAll () {\n    this::subscribeToOverlayChanges()\n  },\n}\n\nconst watch = {\n  id (value) {\n    if (!this.$overlay || value === getOverlayId(this.$overlay)) return\n\n    setOverlayId(this.$overlay, value)\n  },\n  offset (value) {\n    if (this.$overlay && !isEqual(value, this.$overlay.getOffset())) {\n      this.$overlay.setOffset(value)\n    }\n  },\n  position (value) {\n    value = this.pointToViewProj(value)\n    if (this.$overlay && !isEqual(value, this.$overlay.getPosition())) {\n      this.$overlay.setPosition(value)\n    }\n  },\n  positioning (value) {\n    if (this.$overlay && value !== this.$overlay.getPositioning()) {\n      this.$overlay.setPositioning(value)\n    }\n  },\n  resolvedDataProjection () {\n    if (this.$overlay) {\n      this.$overlay.setPosition(this.pointToViewProj(this.position))\n    }\n  },\n}\n\nexport default {\n  name: 'vl-overlay',\n  mixins: [olCmp, useMapCmp, projTransforms],\n  props,\n  computed,\n  methods,\n  watch,\n  created () {\n    Object.defineProperties(this, {\n      /**\n       * @type {module:ol/Overlay~Overlay|undefined}\n       */\n      $overlay: {\n        enumerable: true,\n        get: () => this.$olObject,\n      },\n      $map: {\n        enumerable: true,\n        get: () => this.$services && this.$services.map,\n      },\n      $view: {\n        enumerable: true,\n        get: () => this.$services && this.$services.view,\n      },\n      $overlaysContainer: {\n        enumerable: true,\n        get: () => this.$services && this.$services.overlaysContainer,\n      },\n    })\n  },\n  data () {\n    return {\n      visible: false,\n    }\n  },\n}\n\n/**\n * @return {void}\n * @private\n */\nfunction subscribeToOverlayChanges () {\n  hasOverlay(this)\n\n  const changes = mergeObs(\n    observableFromOlChangeEvent(this.$overlay, 'position', true, undefined, () => this.pointToDataProj(this.$overlay.getPosition())),\n    observableFromOlChangeEvent(this.$overlay, [\n      'offset',\n      'positioning',\n    ], true),\n  )\n\n  this.subscribeTo(changes, ({ prop, value }) => {\n    ++this.rev\n\n    this.$nextTick(() => {\n      this.$emit(`update:${prop}`, value)\n    })\n  })\n}\n","<template>\n  <div :id=\"vmId\" :class=\"classes\">\n    <slot :id=\"id\" :position=\"position\" :offset=\"offset\" :positioning=\"positioning\"/>\n  </div>\n</template>\n\n<script>\n  import Overlay from 'ol/Overlay'\n  import { merge as mergeObs } from 'rxjs/observable'\n  import { olCmp, projTransforms, useMapCmp } from '../../mixin'\n  import { getOverlayId, initializeOverlay, OVERLAY_POSITIONING, setOverlayId } from '../../ol-ext'\n  import { observableFromOlChangeEvent } from '../../rx-ext'\n  import { hasOverlay } from '../../util/assert'\n  import { isEqual, identity } from '../../util/minilo'\n\n  const props = {\n    offset: {\n      type: Array,\n      default: () => [0, 0],\n      validator: value => value.length === 2,\n    },\n    /**\n     * Coordinates in the map view projection.\n     * @type {number[]}\n     */\n    position: {\n      type: Array,\n      validator: value => value.length === 2,\n      required: true,\n    },\n    positioning: {\n      type: String,\n      default: OVERLAY_POSITIONING.TOP_LEFT,\n      validator: value => Object.values(OVERLAY_POSITIONING).includes(value),\n    },\n    stopEvent: {\n      type: Boolean,\n      default: true,\n    },\n    insertFirst: {\n      type: Boolean,\n      default: true,\n    },\n    autoPan: {\n      type: Boolean,\n      default: false,\n    },\n    autoPanMargin: {\n      type: Number,\n      default: 20,\n    },\n    autoPanAnimation: Object,\n    className: String,\n  }\n\n  const computed = {\n    positionViewProj () {\n      if (this.rev && this.$overlay) {\n        return this.$overlay.getPosition()\n      }\n    },\n    positionDataProj () {\n      if (this.rev && this.$overlay) {\n        return this.pointToDataProj(this.$overlay.getPosition())\n      }\n    },\n    classes () {\n      return [\n        this.cmpName,\n        this.visible ? 'visible' : undefined,\n      ].filter(identity)\n    },\n  }\n\n  const methods = {\n    /**\n     * @return {module:ol/Overlay~Overlay}\n     * @protected\n     */\n    createOlObject () {\n      const overlay = new Overlay({\n        id: this.id,\n        offset: this.offset,\n        position: this.pointToViewProj(this.position),\n        positioning: this.positioning,\n        stopEvent: this.stopEvent,\n        insertFirst: this.insertFirst,\n        autoPan: this.autoPan,\n        autoPanMargin: this.autoPanMargin,\n        autoPanAnimation: this.autoPanAnimation,\n        className: this.className,\n      })\n\n      initializeOverlay(overlay, this.id)\n\n      return overlay\n    },\n    /**\n     * @return {void}\n     * @protected\n     */\n    mount () {\n      hasOverlay(this)\n\n      this.$overlay.setElement(this.$el)\n      this.$overlaysContainer && this.$overlaysContainer.addOverlay(this.$overlay)\n      // reset position to trigger panIntoView\n      this.$nextTick(() => {\n        this.$overlay.setPosition(this.positionViewProj.slice())\n        this.visible = true\n      })\n      this.subscribeAll()\n    },\n    /**\n     * @return {void}\n     * @protected\n     */\n    unmount () {\n      hasOverlay(this)\n\n      this.unsubscribeAll()\n      this.$overlay.setElement(undefined)\n      this.$overlaysContainer && this.$overlaysContainer.removeOverlay(this.$overlay)\n\n      this.visible = false\n    },\n    /**\n     * @return {void}\n     * @protected\n     */\n    subscribeAll () {\n      this::subscribeToOverlayChanges()\n    },\n  }\n\n  const watch = {\n    id (value) {\n      if (!this.$overlay || value === getOverlayId(this.$overlay)) return\n\n      setOverlayId(this.$overlay, value)\n    },\n    offset (value) {\n      if (this.$overlay && !isEqual(value, this.$overlay.getOffset())) {\n        this.$overlay.setOffset(value)\n      }\n    },\n    position (value) {\n      value = this.pointToViewProj(value)\n      if (this.$overlay && !isEqual(value, this.$overlay.getPosition())) {\n        this.$overlay.setPosition(value)\n      }\n    },\n    positioning (value) {\n      if (this.$overlay && value !== this.$overlay.getPositioning()) {\n        this.$overlay.setPositioning(value)\n      }\n    },\n    resolvedDataProjection () {\n      if (this.$overlay) {\n        this.$overlay.setPosition(this.pointToViewProj(this.position))\n      }\n    },\n  }\n\n  export default {\n    name: 'vl-overlay',\n    mixins: [olCmp, useMapCmp, projTransforms],\n    props,\n    computed,\n    methods,\n    watch,\n    created () {\n      Object.defineProperties(this, {\n        /**\n         * @type {module:ol/Overlay~Overlay|undefined}\n         */\n        $overlay: {\n          enumerable: true,\n          get: () => this.$olObject,\n        },\n        $map: {\n          enumerable: true,\n          get: () => this.$services && this.$services.map,\n        },\n        $view: {\n          enumerable: true,\n          get: () => this.$services && this.$services.view,\n        },\n        $overlaysContainer: {\n          enumerable: true,\n          get: () => this.$services && this.$services.overlaysContainer,\n        },\n      })\n    },\n    data () {\n      return {\n        visible: false,\n      }\n    },\n  }\n\n  /**\n   * @return {void}\n   * @private\n   */\n  function subscribeToOverlayChanges () {\n    hasOverlay(this)\n\n    const changes = mergeObs(\n      observableFromOlChangeEvent(this.$overlay, 'position', true, undefined, () => this.pointToDataProj(this.$overlay.getPosition())),\n      observableFromOlChangeEvent(this.$overlay, [\n        'offset',\n        'positioning',\n      ], true),\n    )\n\n    this.subscribeTo(changes, ({ prop, value }) => {\n      ++this.rev\n\n      this.$nextTick(() => {\n        this.$emit(`update:${prop}`, value)\n      })\n    })\n  }\n</script>\n","import { pick } from '../../util/minilo'\nimport Overlay from './overlay.vue'\n\nfunction plugin (Vue, options = {}) {\n  if (plugin.installed) {\n    return\n  }\n  plugin.installed = true\n\n  options = pick(options, 'dataProjection')\n  Object.assign(Overlay, options)\n\n  Vue.component(Overlay.name, Overlay)\n}\n\nexport default plugin\n\nexport {\n  Overlay,\n  plugin as install,\n}\n"],"names":["props","offset","type","Array","default","validator","value","length","position","required","positioning","String","OVERLAY_POSITIONING","TOP_LEFT","stopEvent","Boolean","insertFirst","autoPan","autoPanMargin","Number","autoPanAnimation","Object","className","computed","positionViewProj","rev","$overlay","getPosition","positionDataProj","pointToDataProj","classes","cmpName","visible","undefined","identity","methods","createOlObject","overlay","Overlay","id","pointToViewProj","initializeOverlay","mount","hasOverlay","setElement","$el","$overlaysContainer","addOverlay","$nextTick","setPosition","subscribeAll","unmount","unsubscribeAll","removeOverlay","subscribeToOverlayChanges","watch","getOverlayId","setOverlayId","isEqual","getOffset","setOffset","getPositioning","setPositioning","resolvedDataProjection","name","mixins","olCmp","useMapCmp","projTransforms","created","enumerable","get","$olObject","$map","$services","$view","view","overlaysContainer","data","changes","mergeObs","observableFromOlChangeEvent","subscribeTo","prop","$emit","plugin","Vue","options","installed","pick","component"],"mappings":"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"}