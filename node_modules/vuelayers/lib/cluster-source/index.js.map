{"version":3,"file":"index.js","sources":["src/component/cluster-source/builder.js","src/component/cluster-source/source.vue?rollup-plugin-vue=script.js","src/component/cluster-source/source.vue","src/component/cluster-source/index.js"],"sourcesContent":["import Cluster from 'ol/source/Cluster'\nimport { interval } from 'rxjs/observable'\nimport { first, map, skipWhile } from 'rxjs/operators'\nimport { ok } from '../../util/assert'\n\nexport default class Builder {\n  getSource () {\n    return this.source\n  }\n  /**\n   * @param {Vector|undefined} value\n   * @returns {Builder}\n   */\n  setSource (value) {\n    this.source = value\n    return this\n  }\n\n  /**\n   * @param value\n   * @returns {Builder}\n   */\n  setAttributions (value) {\n    this.attributions = value\n    return this\n  }\n\n  /**\n   * @param value\n   * @returns {Builder}\n   */\n  setDistance (value) {\n    this.distance = value\n    return this\n  }\n\n  /**\n   * @param value\n   * @returns {Builder}\n   */\n  setGeometryFunction (value) {\n    this.geometryFunction = value\n    return this\n  }\n\n  /**\n   * @param value\n   * @returns {Builder}\n   */\n  setLogo (value) {\n    this.logo = value\n    return this\n  }\n\n  /**\n   * @param value\n   * @returns {Builder}\n   */\n  setProjection (value) {\n    this.projection = value\n    return this\n  }\n\n  /**\n   * @param value\n   * @returns {Builder}\n   */\n  setWrapX (value) {\n    this.wrapX = value\n    return this\n  }\n\n  /**\n   * @param key\n   * @param value\n   * @return {void}\n   */\n  set (key, value) {\n    this.values || (this.values = {})\n    this.values[key] = value\n  }\n\n  /**\n   * @return {Cluster}\n   */\n  build () {\n    ok(this.source, 'source is provided')\n\n    const source = new Cluster({\n      attributions: this.attributions,\n      distance: this.distance,\n      geometryFunction: this.geometryFunction,\n      logo: this.logo,\n      projection: this.projection,\n      source: this.source,\n      wrapX: this.wrapX,\n    })\n    source.setProperties(this.values)\n\n    return source\n  }\n\n  /**\n   * @return {Promise<Cluster>}\n   */\n  promise () {\n    return interval(100).pipe(\n      skipWhile(() => !this.source),\n      first(),\n      map(::this.build),\n    ).toPromise(Promise)\n  }\n}\n","\nimport { hasSource } from '../../util/assert'\nimport { makeWatchers } from '../../util/vue-helpers'\nimport { sourceContainer, vectorSource } from '../../mixin'\nimport { createPointGeom, findPointOnSurface } from '../../ol-ext'\nimport { observableFromOlEvent } from '../../rx-ext'\nimport mergeDescriptors from '../../util/multi-merge-descriptors'\nimport SourceBuilder from './builder'\n\nexport default {\n  name: 'vl-source-cluster',\n  mixins: [vectorSource, sourceContainer],\n  props: {\n    distance: {\n      type: Number,\n      default: 20,\n    },\n    /**\n     * Geometry function factory\n     * @type {function(): (function(f: ol.Feature): ol.geom.SimpleGeometry|undefined)} geomFuncFactory\n     */\n    geomFuncFactory: {\n      type: Function,\n      default: defaultGeomFuncFactory,\n    },\n  },\n  computed: {\n    geomFunc () {\n      return this.geomFuncFactory()\n    },\n  },\n  methods: {\n    /**\n     * @return {Promise<ol.source.Cluster>}\n     * @protected\n     */\n    createSource () {\n      // partial setup of ol.source.Cluster with the help of SourceBuilder class\n      /**\n       * @type {SourceBuilder}\n       * @private\n       */\n      this._sourceBuilder\n        .setAttributions(this.attributions)\n        .setDistance(this.distance)\n        .setGeometryFunction(this.geomFunc)\n        .setLogo(this.logo)\n        .setProjection(this.projection)\n        .setWrapX(this.wrapX)\n\n      return this._sourceBuilder.promise()\n    },\n    /**\n     * @return {Object}\n     * @protected\n     */\n    getServices () {\n      return mergeDescriptors(\n        this::vectorSource.methods.getServices(),\n        this::sourceContainer.methods.getServices(),\n      )\n    },\n    /**\n     * @return {{\n     *     setSource: function(ol.source.Source): void,\n     *     getSource: function(): ol.source.Source\n     *   }|undefined}\n     * @protected\n     */\n    getSourceTarget () {\n      return this._sourceBuilder\n    },\n    subscribeAll () {\n      this::vectorSource.methods.subscribeAll()\n      this::subscribeToSourceChanges()\n    },\n  },\n  watch: {\n    distance (value) {\n      if (this.$source && value !== this.$source.getDistance()) {\n        this.$source.setDistance(value)\n      }\n    },\n    ...makeWatchers(['geomFunc'], () => function () {\n      this.scheduleRecreate()\n    }),\n  },\n  created () {\n    /**\n     * @type {SourceBuilder}\n     * @private\n     */\n    this._sourceBuilder = new SourceBuilder()\n\n    Object.defineProperties(this, {\n      $innerSource: {\n        enumerable: true,\n        get: this.getSource,\n      },\n    })\n  },\n}\n\n/**\n * @returns {function(f: ol.Feature): ol.geom.SimpleGeometry|undefined}\n */\nfunction defaultGeomFuncFactory () {\n  return function (feature) {\n    const geometry = feature.getGeometry()\n    if (!geometry) return\n\n    let coordinate = findPointOnSurface(geometry)\n    if (coordinate) {\n      return createPointGeom(coordinate)\n    }\n  }\n}\n\nfunction subscribeToSourceChanges () {\n  hasSource(this)\n\n  const adds = observableFromOlEvent(this.$source, 'addfeature')\n  this.subscribeTo(adds, ({ feature }) => {\n    this.addFeature(feature)\n  })\n\n  const removes = observableFromOlEvent(this.$source, 'removefeature')\n  this.subscribeTo(removes, ({ feature }) => {\n    this.removeFeature(feature)\n  })\n}\n","<script>\n  import { hasSource } from '../../util/assert'\n  import { makeWatchers } from '../../util/vue-helpers'\n  import { sourceContainer, vectorSource } from '../../mixin'\n  import { createPointGeom, findPointOnSurface } from '../../ol-ext'\n  import { observableFromOlEvent } from '../../rx-ext'\n  import mergeDescriptors from '../../util/multi-merge-descriptors'\n  import SourceBuilder from './builder'\n\n  export default {\n    name: 'vl-source-cluster',\n    mixins: [vectorSource, sourceContainer],\n    props: {\n      distance: {\n        type: Number,\n        default: 20,\n      },\n      /**\n       * Geometry function factory\n       * @type {function(): (function(f: ol.Feature): ol.geom.SimpleGeometry|undefined)} geomFuncFactory\n       */\n      geomFuncFactory: {\n        type: Function,\n        default: defaultGeomFuncFactory,\n      },\n    },\n    computed: {\n      geomFunc () {\n        return this.geomFuncFactory()\n      },\n    },\n    methods: {\n      /**\n       * @return {Promise<ol.source.Cluster>}\n       * @protected\n       */\n      createSource () {\n        // partial setup of ol.source.Cluster with the help of SourceBuilder class\n        /**\n         * @type {SourceBuilder}\n         * @private\n         */\n        this._sourceBuilder\n          .setAttributions(this.attributions)\n          .setDistance(this.distance)\n          .setGeometryFunction(this.geomFunc)\n          .setLogo(this.logo)\n          .setProjection(this.projection)\n          .setWrapX(this.wrapX)\n\n        return this._sourceBuilder.promise()\n      },\n      /**\n       * @return {Object}\n       * @protected\n       */\n      getServices () {\n        return mergeDescriptors(\n          this::vectorSource.methods.getServices(),\n          this::sourceContainer.methods.getServices(),\n        )\n      },\n      /**\n       * @return {{\n       *     setSource: function(ol.source.Source): void,\n       *     getSource: function(): ol.source.Source\n       *   }|undefined}\n       * @protected\n       */\n      getSourceTarget () {\n        return this._sourceBuilder\n      },\n      subscribeAll () {\n        this::vectorSource.methods.subscribeAll()\n        this::subscribeToSourceChanges()\n      },\n    },\n    watch: {\n      distance (value) {\n        if (this.$source && value !== this.$source.getDistance()) {\n          this.$source.setDistance(value)\n        }\n      },\n      ...makeWatchers(['geomFunc'], () => function () {\n        this.scheduleRecreate()\n      }),\n    },\n    created () {\n      /**\n       * @type {SourceBuilder}\n       * @private\n       */\n      this._sourceBuilder = new SourceBuilder()\n\n      Object.defineProperties(this, {\n        $innerSource: {\n          enumerable: true,\n          get: this.getSource,\n        },\n      })\n    },\n  }\n\n  /**\n   * @returns {function(f: ol.Feature): ol.geom.SimpleGeometry|undefined}\n   */\n  function defaultGeomFuncFactory () {\n    return function (feature) {\n      const geometry = feature.getGeometry()\n      if (!geometry) return\n\n      let coordinate = findPointOnSurface(geometry)\n      if (coordinate) {\n        return createPointGeom(coordinate)\n      }\n    }\n  }\n\n  function subscribeToSourceChanges () {\n    hasSource(this)\n\n    const adds = observableFromOlEvent(this.$source, 'addfeature')\n    this.subscribeTo(adds, ({ feature }) => {\n      this.addFeature(feature)\n    })\n\n    const removes = observableFromOlEvent(this.$source, 'removefeature')\n    this.subscribeTo(removes, ({ feature }) => {\n      this.removeFeature(feature)\n    })\n  }\n</script>\n","import { pick } from '../../util/minilo'\nimport Source from './source.vue'\n\nfunction plugin (Vue, options = {}) {\n  if (plugin.installed) {\n    return\n  }\n  plugin.installed = true\n\n  options = pick(options, 'dataProjection')\n  Object.assign(Source, options)\n\n  Vue.component(Source.name, Source)\n}\n\nexport default plugin\n\nexport {\n  Source,\n  plugin as install,\n}\n"],"names":["Builder","source","value","attributions","distance","geometryFunction","logo","projection","wrapX","key","values","ok","Cluster","setProperties","interval","pipe","skipWhile","first","map","build","toPromise","name","mixins","vectorSource","sourceContainer","props","type","Number","default","geomFuncFactory","Function","defaultGeomFuncFactory","computed","geomFunc","methods","createSource","_sourceBuilder","setAttributions","setDistance","setGeometryFunction","setLogo","setProjection","setWrapX","promise","getServices","mergeDescriptors","getSourceTarget","subscribeAll","subscribeToSourceChanges","watch","$source","getDistance","makeWatchers","scheduleRecreate","created","SourceBuilder","$innerSource","enumerable","get","getSource","feature","geometry","getGeometry","coordinate","findPointOnSurface","createPointGeom","hasSource","adds","observableFromOlEvent","subscribeTo","addFeature","removes","removeFeature","plugin","Vue","options","installed","pick","Source","component"],"mappings":"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"}