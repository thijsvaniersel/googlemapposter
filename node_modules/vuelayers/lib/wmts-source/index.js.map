{"version":3,"file":"index.js","sources":["src/component/wmts-source/source.vue?rollup-plugin-vue=script.js","src/component/wmts-source/source.vue","src/component/wmts-source/index.js"],"sourcesContent":["\nimport WMTSSource from 'ol/source/WMTS'\nimport WMTSTileGrid from 'ol/tilegrid/WMTS'\nimport { tileSource } from '../../mixin'\nimport {\n  createExtentFromProjection,\n  EXTENT_CORNER,\n  getExtentCorner,\n  resolutionsFromExtent,\n  WMTS_FORMAT,\n  WMTS_REQUEST_ENCODING,\n  WMTS_VERSION,\n} from '../../ol-ext'\nimport { range } from '../../util/minilo'\nimport { makeWatchers } from '../../util/vue-helpers'\n\nexport default {\n  name: 'vl-source-wmts',\n  mixins: [tileSource],\n  props: {\n    dimensions: Object,\n    format: {\n      type: String,\n      default: WMTS_FORMAT,\n    },\n    layerName: {\n      type: String,\n      required: true,\n    },\n    matrixSet: {\n      type: String,\n      required: true,\n    },\n    matrixIds: {\n      type: Array,\n    },\n    requestEncoding: {\n      type: String,\n      default: WMTS_REQUEST_ENCODING,\n    },\n    styleName: {\n      type: String,\n      required: true,\n    },\n    version: {\n      type: String,\n      default: WMTS_VERSION,\n    },\n    url: {\n      type: String,\n      required: true,\n    },\n    origin: {\n      type: Array,\n    },\n    resolutions: {\n      type: Array,\n    },\n  },\n  methods: {\n    /**\n     * @returns {WMTS}\n     * @protected\n     */\n    createSource () {\n      return new WMTSSource({\n        attributions: this.attributions,\n        cacheSize: this.cacheSize,\n        crossOrigin: this.crossOrigin,\n        dimensions: this.dimensions,\n        format: this.format,\n        layer: this.layerName,\n        logo: this.logo,\n        matrixSet: this.matrixSet,\n        origin: this.origin,\n        projection: this.projection,\n        reprojectionErrorThreshold: this.reprojectionErrorThreshold,\n        requestEncoding: this.requestEncoding,\n        resolutions: this.resolutions,\n        tileGrid: this._tileGrid,\n        tilePixelRatio: this.tilePixelRatio,\n        style: this.styleName,\n        version: this.version,\n        url: this.urlTmpl,\n        wrapX: this.wrapX,\n        transition: this.transition,\n        tileLoadFunction: this.tileLoadFunction,\n      })\n    },\n    createTileGrid () {\n      let extent = createExtentFromProjection(this.projection)\n      let resolutions = this.resolutions ? this.resolutions : resolutionsFromExtent(extent, this.maxZoom, this.tileSize)\n      let origin = this.origin ? this.origin : getExtentCorner(extent, EXTENT_CORNER.TOP_LEFT)\n      let matrixIds = this.matrixIds || Array.from(range(this.minZoom, resolutions.length))\n\n      return new WMTSTileGrid({\n        extent,\n        origin,\n        resolutions,\n        tileSize: this.tileSize,\n        minZoom: this.minZoom,\n        matrixIds,\n      })\n    },\n  },\n  watch: {\n    ...makeWatchers([\n      'dimensions',\n      'format',\n      'layerName',\n      'matrixSet',\n      'requestEncoding',\n      'styleName',\n      'version',\n      'resolutions',\n      'origin',\n    ], () => function () {\n      this.scheduleRecreate()\n    }),\n  },\n}\n","<script>\n  import WMTSSource from 'ol/source/WMTS'\n  import WMTSTileGrid from 'ol/tilegrid/WMTS'\n  import { tileSource } from '../../mixin'\n  import {\n    createExtentFromProjection,\n    EXTENT_CORNER,\n    getExtentCorner,\n    resolutionsFromExtent,\n    WMTS_FORMAT,\n    WMTS_REQUEST_ENCODING,\n    WMTS_VERSION,\n  } from '../../ol-ext'\n  import { range } from '../../util/minilo'\n  import { makeWatchers } from '../../util/vue-helpers'\n\n  export default {\n    name: 'vl-source-wmts',\n    mixins: [tileSource],\n    props: {\n      dimensions: Object,\n      format: {\n        type: String,\n        default: WMTS_FORMAT,\n      },\n      layerName: {\n        type: String,\n        required: true,\n      },\n      matrixSet: {\n        type: String,\n        required: true,\n      },\n      matrixIds: {\n        type: Array,\n      },\n      requestEncoding: {\n        type: String,\n        default: WMTS_REQUEST_ENCODING,\n      },\n      styleName: {\n        type: String,\n        required: true,\n      },\n      version: {\n        type: String,\n        default: WMTS_VERSION,\n      },\n      url: {\n        type: String,\n        required: true,\n      },\n      origin: {\n        type: Array,\n      },\n      resolutions: {\n        type: Array,\n      },\n    },\n    methods: {\n      /**\n       * @returns {WMTS}\n       * @protected\n       */\n      createSource () {\n        return new WMTSSource({\n          attributions: this.attributions,\n          cacheSize: this.cacheSize,\n          crossOrigin: this.crossOrigin,\n          dimensions: this.dimensions,\n          format: this.format,\n          layer: this.layerName,\n          logo: this.logo,\n          matrixSet: this.matrixSet,\n          origin: this.origin,\n          projection: this.projection,\n          reprojectionErrorThreshold: this.reprojectionErrorThreshold,\n          requestEncoding: this.requestEncoding,\n          resolutions: this.resolutions,\n          tileGrid: this._tileGrid,\n          tilePixelRatio: this.tilePixelRatio,\n          style: this.styleName,\n          version: this.version,\n          url: this.urlTmpl,\n          wrapX: this.wrapX,\n          transition: this.transition,\n          tileLoadFunction: this.tileLoadFunction,\n        })\n      },\n      createTileGrid () {\n        let extent = createExtentFromProjection(this.projection)\n        let resolutions = this.resolutions ? this.resolutions : resolutionsFromExtent(extent, this.maxZoom, this.tileSize)\n        let origin = this.origin ? this.origin : getExtentCorner(extent, EXTENT_CORNER.TOP_LEFT)\n        let matrixIds = this.matrixIds || Array.from(range(this.minZoom, resolutions.length))\n\n        return new WMTSTileGrid({\n          extent,\n          origin,\n          resolutions,\n          tileSize: this.tileSize,\n          minZoom: this.minZoom,\n          matrixIds,\n        })\n      },\n    },\n    watch: {\n      ...makeWatchers([\n        'dimensions',\n        'format',\n        'layerName',\n        'matrixSet',\n        'requestEncoding',\n        'styleName',\n        'version',\n        'resolutions',\n        'origin',\n      ], () => function () {\n        this.scheduleRecreate()\n      }),\n    },\n  }\n</script>\n","import { pick } from '../../util/minilo'\nimport Source from './source.vue'\n\nfunction plugin (Vue, options = {}) {\n  if (plugin.installed) {\n    return\n  }\n  plugin.installed = true\n\n  options = pick(options, 'dataProjection')\n  Object.assign(Source, options)\n\n  Vue.component(Source.name, Source)\n}\n\nexport default plugin\n\nexport {\n  Source,\n  plugin as install,\n}\n"],"names":["name","mixins","tileSource","props","dimensions","Object","format","type","String","default","WMTS_FORMAT","layerName","required","matrixSet","matrixIds","Array","requestEncoding","WMTS_REQUEST_ENCODING","styleName","version","WMTS_VERSION","url","origin","resolutions","methods","createSource","WMTSSource","attributions","cacheSize","crossOrigin","layer","logo","projection","reprojectionErrorThreshold","tileGrid","_tileGrid","tilePixelRatio","style","urlTmpl","wrapX","transition","tileLoadFunction","createTileGrid","extent","createExtentFromProjection","resolutionsFromExtent","maxZoom","tileSize","getExtentCorner","EXTENT_CORNER","TOP_LEFT","range","minZoom","length","WMTSTileGrid","watch","makeWatchers","scheduleRecreate","plugin","Vue","options","installed","pick","Source","component"],"mappings":"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"}